/** pragma type contract **/

import {
  getEnvironment,
  replaceImportAddresses,
  reportMissingImports,
  deployContract,
} from '{{ ixDependency }}'

export const CODE = `
{{{ code }}}
`;

/**
* Method to generate cadence code for {{ assetName }} contract
* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value
*/
export const {{ assetName }}Template = async (addressMap = {}) => {
  const envMap = await getEnvironment();
  const fullMap = {
  ...envMap,
  ...addressMap,
  };

  // If there are any missing imports in fullMap it will be reported via console
  reportMissingImports(CODE, fullMap, `{{ name }} =>`)

  return replaceImportAddresses(CODE, fullMap);
};


/**
* Deploys {{ assetName }} transaction to the network
* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value
* @param Array<*> args - list of arguments
* param Array<string> - list of signers
*/
export const  deploy{{ assetName }} = async (props) => {
  const { addressMap = {} } = props;
  const code = await {{ assetName }}Template(addressMap);
  const name = "{{ contractName }}"

  return deployContract({ code, name, processed: true, ...props })
}